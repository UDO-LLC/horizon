{% liquid
  assign header_content = section.settings.header_content
  assign header_font_size = section.settings.header_font_size
  assign header_color = section.settings.header_color
  assign description_content = section.settings.description_content
  assign description_font_size = section.settings.description_font_size
  assign description_color = section.settings.description_color
  assign text_align = section.settings.text_align
  assign image_height = section.settings.image_height | default: 240
  assign image_height_mobile = section.settings.image_height_mobile | default: 160
  assign image_rows = section.settings.image_rows
  assign scroll_speed = section.settings.scroll_speed | default: 50
  assign pause_on_hover = section.settings.pause_on_hover
  assign enable_hover_effects = section.settings.enable_hover_effects

  # Get all valid image blocks
  assign image_blocks = section.blocks | where: 'type', 'review_image'
  assign total_images = image_blocks.size

  # Calculate images per row with better distribution
  assign images_per_row = total_images | divided_by: image_rows | at_least: 1
  assign remainder = total_images | modulo: image_rows
%}

<div class="review-marquee" style="{% render 'spacing-padding', settings: section.settings %}">
  <div class="review-marquee__container">
    {% if header_content != blank or description_content != blank %}
      <div class="review-marquee__header" style="text-align: {{ text_align }};">
        {% if header_content != blank %}
          <div
            class="review-marquee__header-content"
            style="
              font-size: {{ header_font_size }}px;
              color: {{ header_color }};
            "
          >
            {{ header_content }}
          </div>
        {% endif %}

        {% if description_content != blank %}
          <div
            class="review-marquee__description review-marquee__description--{{ text_align }}"
            style="
              font-size: {{ description_font_size }}px;
              color: {{ description_color }};
            "
          >
            {{ description_content }}
          </div>
        {% endif %}
      </div>
    {% endif %}

    {% if total_images > 0 %}
      <div
        class="review-marquee__gallery"
        role="region"
        aria-label="Customer review images"
        {% if pause_on_hover %}
          data-pause-on-hover="true"
        {% endif %}
        {% if enable_hover_effects %}
          data-hover-effects="true"
        {% endif %}
      >
        {% for row_index in (1..image_rows) %}
          {% liquid
            assign images_per_row = total_images | divided_by: image_rows | at_least: 1
            assign remainder = total_images | modulo: image_rows

            assign start_index = forloop.index0 | times: images_per_row
            if forloop.index <= remainder
              assign start_index = start_index | plus: forloop.index0
            endif
            assign end_index = start_index | plus: images_per_row | minus: 1
            if forloop.index <= remainder
              assign end_index = end_index | plus: 1
            endif
          %}

          <div class="review-marquee__row">
            <div
              class="review-marquee__scroll-container"
              style="--scroll-speed: {{ scroll_speed }}s; --image-height: {{ image_height }}px; --image-height-mobile: {{ image_height_mobile }}px;"
            >
              <div class="review-marquee__scroll-content" data-marquee-row="{{ row_index }}">
                {% for block_index in (start_index..end_index) %}
                  {% assign block = image_blocks[block_index] %}
                  {% if block.settings.image != blank %}
                    <div class="review-marquee__image-wrapper" {{ block.shopify_attributes }}>
                      <img
                        src="{{ block.settings.image | image_url }}"
                        alt="{{ block.settings.image.alt | default: 'Customer review image' }}"
                        width="{{ block.settings.image.width }}"
                        height="{{ block.settings.image.height }}"
                        loading="lazy"
                        class="review-marquee__image"
                        decoding="async"
                      >
                    </div>
                  {% endif %}
                {% endfor %}
              </div>
            </div>
          </div>
        {% endfor %}
      </div>
    {% endif %}
  </div>
</div>

{% stylesheet %}
  .review-marquee {
    width: 100%;
    background-color: var(--color-background);
    padding: 2.5rem 0;
  }

  @media (min-width: 640px) {
    .review-marquee {
      padding: 3.5rem 0;
    }
  }

  @media (min-width: 1024px) {
    .review-marquee {
      padding: 4rem 0;
    }
  }

  .review-marquee__container {
    margin: 0 auto;
    padding: 0 var(--full-page-margin-inline-offset);
  }

  .review-marquee__header {
    margin-bottom: 1rem;
  }

  .review-marquee__header-content {
    margin-bottom: 0.5rem;
    font-weight: 600;
    text-transform: uppercase;
  }

  .review-marquee__description {
    max-width: 42rem;
  }

  .review-marquee__description--left {
    margin: 0;
    text-align: left;
  }

  .review-marquee__description--center {
    margin: 0 auto;
    text-align: center;
  }

  .review-marquee__description--right {
    margin: 0 0 0 auto;
    text-align: right;
  }

  .review-marquee__gallery {
    margin-top: 2rem;
  }

  .review-marquee__row {
    margin-bottom: 1rem;
  }

  .review-marquee__row:last-child {
    margin-bottom: 0;
  }

  .review-marquee__scroll-container {
    overflow: hidden;
    direction: ltr;
    position: relative;
  }

  .review-marquee__scroll-content {
    display: flex;
    width: fit-content;
    gap: 0.5rem;
  }

  .review-marquee__image-wrapper {
    flex-shrink: 0;
    padding: 0 0.5rem;
    height: var(--image-height-mobile, 160px);
    display: flex;
    align-items: center;
    justify-content: center;
    transition: transform 0.2s ease;
  }

  @media (min-width: 768px) {
    .review-marquee__image-wrapper {
      height: var(--image-height, 240px);
    }
  }

  .review-marquee__image-wrapper:hover {
    transform: scale(1.05);
  }

  .review-marquee__image {
    max-height: 100%;
    max-width: 100%;
    width: auto;
    height: auto;
    border-radius: 0.5rem;
    object-fit: scale-down;
    transition: filter 0.2s ease;
  }

  .review-marquee__image-wrapper:hover .review-marquee__image {
    filter: brightness(1.1);
  }

  /* Disable hover effects when not enabled */
  .review-marquee__gallery:not([data-hover-effects='true']) .review-marquee__image-wrapper:hover {
    transform: none;
  }

  .review-marquee__gallery:not([data-hover-effects='true'])
    .review-marquee__image-wrapper:hover
    .review-marquee__image {
    filter: none;
  }

  /* Responsive improvements */
  @media (max-width: 768px) {
    .review-marquee__image-wrapper {
      padding: 0 0.25rem;
    }

    .review-marquee__scroll-content {
      gap: 0.25rem;
    }
  }

  @media (prefers-reduced-motion: reduce) {
    .review-marquee__scroll-content {
      animation: none;
    }

    .review-marquee__image-wrapper:hover {
      transform: none;
    }

    .review-marquee__image-wrapper:hover .review-marquee__image {
      filter: none;
    }
  }
{% endstylesheet %}

{% javascript %}
  class ReviewMarquee {
    constructor() {
      this.rows = document.querySelectorAll('.review-marquee__scroll-content');
      this.isInitialized = false;

      // Bind methods to prevent memory leaks
      this.boundMethods = {
        pauseAll: this.pauseAll.bind(this),
        resumeAll: this.resumeAll.bind(this),
        handleResize: this.handleResize.bind(this),
      };

      // Better Safari detection with feature detection
      this.isSafari = this.detectSafari();

      // Track viewport size for mobile optimization
      this.lastViewportSize = { width: window.innerWidth, height: window.innerHeight };

      this.init();
    }

    detectSafari() {
      return /Safari/.test(navigator.userAgent) && !/Chrome|Chromium|Edg|OPR/.test(navigator.userAgent);
    }

    init() {
      if (this.isInitialized) return;

      try {
        // Safari-specific: Longer delay to ensure DOM is ready
        if (this.isSafari) {
          setTimeout(() => this.setupAnimations(), 1000);
        } else {
          this.setupAnimations();
        }

        this.isInitialized = true;
      } catch (error) {
        this.handleError(error, 'initialization');
      }
    }

    setupAnimations() {
      try {
        this.rows.forEach((row, index) => {
          this.setupRow(row, index);
        });

        this.setupPauseOnHover();
      } catch (error) {
        this.handleError(error, 'animation setup');
      }
    }

    setupRow(row, index) {
      try {
        const container = row.closest('.review-marquee__scroll-container');
        if (!container) {
          console.warn('Container not found for row:', index);
          return;
        }

        const scrollSpeed = parseFloat(getComputedStyle(container).getPropertyValue('--scroll-speed')) || 30;

        // Calculate widths
        const totalWidth = row.scrollWidth;
        const containerWidth = container.clientWidth;

        // Only animate if content is wider than container
        if (totalWidth <= containerWidth) {
          return;
        }

        const scrollDistance = totalWidth - containerWidth;
        this.createCSSAnimation(row, scrollDistance, scrollSpeed, index);
      } catch (error) {
        this.handleError(error, `row setup ${index}`);
      }
    }

    createCSSAnimation(row, scrollDistance, scrollSpeed, index) {
      try {
        const animationName = `marquee-${index}-${Date.now()}`;

        // Safari-specific: Force hardware acceleration
        if (this.isSafari) {
          row.style.transform = 'translateZ(0)';
          row.style.webkitTransform = 'translateZ(0)';
          row.style.willChange = 'transform';
          row.style.webkitWillChange = 'transform';
          row.style.backfaceVisibility = 'hidden';
          row.style.webkitBackfaceVisibility = 'hidden';
        }

        // Create style element
        const style = document.createElement('style');
        style.textContent = `
          @keyframes ${animationName} {
            0% { transform: translateX(0); }
            100% { transform: translateX(-${scrollDistance}px); }
          }
          @-webkit-keyframes ${animationName} {
            0% { -webkit-transform: translateX(0); }
            100% { -webkit-transform: translateX(-${scrollDistance}px); }
          }
        `;
        document.head.appendChild(style);

        // Apply animation
        row.style.animation = `${animationName} ${scrollSpeed}s linear infinite`;
        row.style.webkitAnimation = `${animationName} ${scrollSpeed}s linear infinite`;

        // Store reference for cleanup
        row.dataset.animationStyle = style;
        row.dataset.animationName = animationName;

        // Force a reflow to ensure animation is applied
        row.offsetHeight;
      } catch (error) {
        this.handleError(error, 'CSS animation creation');

        // Fallback: Try inline animation
        try {
          row.style.transition = `transform ${scrollSpeed}s linear infinite`;
          row.style.transform = `translateX(-${scrollDistance}px)`;

          // Store fallback info
          row.dataset.animationStyle = 'fallback';
          row.dataset.animationName = 'fallback-inline';
        } catch (fallbackError) {
          this.handleError(fallbackError, 'fallback animation');
        }
      }
    }

    setupPauseOnHover() {
      try {
        const gallery = document.querySelector('.review-marquee__gallery');
        if (!gallery || !gallery.hasAttribute('data-pause-on-hover')) return;

        // Use bound methods to prevent memory leaks
        gallery.addEventListener('mouseenter', this.boundMethods.pauseAll);
        gallery.addEventListener('mouseleave', this.boundMethods.resumeAll);
        gallery.addEventListener('touchstart', this.boundMethods.pauseAll);
        gallery.addEventListener('touchend', this.boundMethods.resumeAll);

        // Store reference for cleanup
        this.gallery = gallery;
      } catch (error) {
        this.handleError(error, 'hover setup');
      }
    }

    pauseAll() {
      try {
        this.rows.forEach((row) => {
          row.style.animationPlayState = 'paused';
          row.style.webkitAnimationPlayState = 'paused';
        });
      } catch (error) {
        this.handleError(error, 'pause animation');
      }
    }

    resumeAll() {
      try {
        this.rows.forEach((row) => {
          row.style.animationPlayState = 'running';
          row.style.webkitAnimationPlayState = 'running';
        });
      } catch (error) {
        this.handleError(error, 'resume animation');
      }
    }

    // Optimized resize handler - only restarts animations, not entire component
    handleResize() {
      try {
        const currentViewport = { width: window.innerWidth, height: window.innerHeight };
        const widthDiff = Math.abs(currentViewport.width - this.lastViewportSize.width);
        const heightDiff = Math.abs(currentViewport.height - this.lastViewportSize.height);

        // Only restart animations on significant width changes
        // Ignore height changes (like mobile address bar show/hide)
        const isSignificantWidthChange = widthDiff > 20;
        const isOnlyHeightChange = widthDiff <= 5 && heightDiff > 20;

        if (isSignificantWidthChange && !isOnlyHeightChange) {
          // Only restart animations, not entire component
          this.restartAnimations();
        }

        // Update the last viewport size
        this.lastViewportSize = currentViewport;
      } catch (error) {
        this.handleError(error, 'resize handling');
      }
    }

    restartAnimations() {
      try {
        // Clear existing animations
        this.clearAnimations();

        // Re-setup animations without reinitializing component
        this.setupAnimations();
      } catch (error) {
        this.handleError(error, 'animation restart');
      }
    }

    clearAnimations() {
      try {
        this.rows.forEach((row) => {
          // Remove animation
          row.style.animation = '';
          row.style.webkitAnimation = '';

          // Remove style element
          const style = row.dataset.animationStyle;
          if (style && style.parentNode && typeof style === 'object') {
            style.parentNode.removeChild(style);
          }

          // Clear data
          delete row.dataset.animationStyle;
          delete row.dataset.animationName;
        });
      } catch (error) {
        this.handleError(error, 'animation cleanup');
      }
    }

    // Better error handling with user feedback
    handleError(error, context) {
      console.error(`Marquee error in ${context}:`, error);
    }

    // Comprehensive cleanup method
    cleanup() {
      try {
        // Clear animations
        this.clearAnimations();

        // Remove event listeners
        if (this.gallery) {
          this.gallery.removeEventListener('mouseenter', this.boundMethods.pauseAll);
          this.gallery.removeEventListener('mouseleave', this.boundMethods.resumeAll);
          this.gallery.removeEventListener('touchstart', this.boundMethods.pauseAll);
          this.gallery.removeEventListener('touchend', this.boundMethods.resumeAll);
        }

        // Clear bound methods
        this.boundMethods = null;

        // Reset state
        this.isInitialized = false;
        this.gallery = null;
      } catch (error) {
        console.error('Error during cleanup:', error);
      }
    }

    // Public destroy method
    destroy() {
      this.cleanup();
    }
  }

  // Initialize with proper error handling
  let marquee;

  const initializeMarquee = () => {
    try {
      marquee = new ReviewMarquee();
    } catch (error) {
      console.error('Failed to initialize ReviewMarquee:', error);
    }
  };

  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initializeMarquee);
  } else {
    initializeMarquee();
  }

  // Optimized resize handler with proper cleanup
  let resizeTimeout;
  const handleResize = () => {
    clearTimeout(resizeTimeout);
    resizeTimeout = setTimeout(() => {
      if (marquee && marquee.isInitialized) {
        marquee.boundMethods.handleResize();
      }
    }, 250);
  };

  window.addEventListener('resize', handleResize);

  // Cleanup on page unload
  window.addEventListener('beforeunload', () => {
    if (marquee) {
      marquee.cleanup();
    }
    window.removeEventListener('resize', handleResize);
  });
{% endjavascript %}

{% schema %}
{
  "name": "t:names.review_marquee",
  "tag": "section",
  "class": "review-marquee",
  "blocks": [
    {
      "type": "review_image",
      "name": "t:names.review_image",
      "settings": [
        {
          "type": "image_picker",
          "id": "image",
          "label": "Review Image"
        }
      ]
    }
  ],
  "settings": [
    {
      "type": "header",
      "content": "Header Content"
    },
    {
      "type": "richtext",
      "id": "header_content",
      "label": "Header Content",
      "default": "<p>Discover What Makes Us Special</p>"
    },
    {
      "type": "range",
      "id": "header_font_size",
      "label": "Header Font Size",
      "min": 12,
      "max": 48,
      "step": 1,
      "default": 16,
      "unit": "px"
    },
    {
      "type": "color",
      "id": "header_color",
      "label": "Header Color",
      "default": "#000000"
    },
    {
      "type": "header",
      "content": "Description Content"
    },
    {
      "type": "richtext",
      "id": "description_content",
      "label": "Description Content",
      "default": "<p>Every review tells a story of success. Discover why our customers choose us and how our products have made a meaningful difference in their lives. From improved skills to completed masterpieces, these authentic testimonials show the real impact of choosing quality and craftsmanship.</p>"
    },
    {
      "type": "range",
      "id": "description_font_size",
      "label": "Description Font Size",
      "min": 12,
      "max": 32,
      "step": 1,
      "default": 16,
      "unit": "px"
    },
    {
      "type": "color",
      "id": "description_color",
      "label": "Description Color",
      "default": "#555555"
    },
    {
      "type": "select",
      "id": "text_align",
      "label": "Text Alignment",
      "options": [
        {
          "value": "left",
          "label": "Left"
        },
        {
          "value": "center",
          "label": "Center"
        },
        {
          "value": "right",
          "label": "Right"
        }
      ],
      "default": "center"
    },
    {
      "type": "header",
      "content": "Gallery Settings"
    },
    {
      "type": "range",
      "id": "image_height",
      "label": "Max Image Height (Desktop)",
      "min": 120,
      "max": 400,
      "step": 10,
      "default": 240,
      "unit": "px"
    },
    {
      "type": "range",
      "id": "image_height_mobile",
      "label": "Max Image Height (Mobile)",
      "min": 80,
      "max": 300,
      "step": 10,
      "default": 160,
      "unit": "px"
    },
    {
      "type": "range",
      "id": "image_rows",
      "label": "Number of Image Rows",
      "min": 1,
      "max": 5,
      "step": 1,
      "default": 1
    },
    {
      "type": "range",
      "id": "scroll_speed",
      "label": "Scroll Speed",
      "min": 10,
      "max": 110,
      "step": 1,
      "default": 50,
      "unit": "s"
    },
    {
      "type": "checkbox",
      "id": "pause_on_hover",
      "label": "Pause on Hover",
      "default": false,
      "info": "Pause the marquee animation when users hover over or touch the gallery"
    },
    {
      "type": "checkbox",
      "id": "enable_hover_effects",
      "label": "Enable Hover Effects",
      "default": false,
      "info": "Show scale and brightness effects when hovering over images"
    },
    {
      "type": "header",
      "content": "t:content.padding"
    },
    {
      "type": "range",
      "id": "padding-block-start",
      "label": "t:settings.top",
      "min": 0,
      "max": 100,
      "step": 1,
      "unit": "px",
      "default": 40
    },
    {
      "type": "range",
      "id": "padding-block-end",
      "label": "t:settings.bottom",
      "min": 0,
      "max": 100,
      "step": 1,
      "unit": "px",
      "default": 40
    }
  ],
  "presets": [
    {
      "name": "t:names.review_marquee",
      "blocks": {
        "review_image_1": {
          "type": "review_image"
        },
        "review_image_2": {
          "type": "review_image"
        },
        "review_image_3": {
          "type": "review_image"
        }
      },
      "block_order": ["review_image_1", "review_image_2", "review_image_3"]
    }
  ]
}
{% endschema %}
