{%- doc -%}
  Renders a "Buy X Get Y" discount display component for cart-level discounts.
  
  This component shows a progress indicator for Buy X Get Y promotions
  based on theme settings configuration. Only eligible products/collections
  count towards the promotion progress. The component automatically resets
  when discounts are applied, showing progress towards the next threshold.

  @param {number} current_quantity - Current quantity in cart (default: 0)
{%- enddoc -%}

{% liquid
  assign current_quantity = current_quantity | default: 0

  # Get settings from theme configuration
  assign required_quantity = settings.buy_x_get_y_required_quantity | default: 2
  assign item_label = settings.buy_x_get_y_item_label | default: 'Kits'

  # Get eligible collections and products from settings
  assign eligible_collections = settings.buy_x_get_y_eligible_collections
  assign eligible_products = settings.buy_x_get_y_eligible_products
  
  # Calculate eligible quantity from cart items (excluding items with discounts)
  assign eligible_quantity = 0
  
  # If no collections or products are specified, all non-discounted items are eligible
  if eligible_collections == blank and eligible_products == blank
    # Count only items without discounts
    for item in cart.items
      if item.discount_allocations == blank
        assign eligible_quantity = eligible_quantity | plus: item.quantity
      endif
    endfor
  else
    # Check each cart item against eligible collections and products (excluding discounted items)
    for item in cart.items
      # Skip items that already have discounts
      if item.discount_allocations != blank
        continue
      endif
      
      assign is_eligible = false
      
      # Check if product is in eligible products list
      if eligible_products != blank
        for eligible_product in eligible_products
          if item.product.id == eligible_product.id
            assign is_eligible = true
            break
          endif
        endfor
      endif
      
      # Check if product is in eligible collections
      if is_eligible == false and eligible_collections != blank
        for eligible_collection in eligible_collections
          for collection in item.product.collections
            if collection.id == eligible_collection.id
              assign is_eligible = true
              break
            endif
          endfor
          if is_eligible
            break
          endif
        endfor
      endif
      
      # Add quantity if eligible
      if is_eligible
        assign eligible_quantity = eligible_quantity | plus: item.quantity
      endif
    endfor
  endif

  # Get color settings from theme configuration
  assign progress_bar_bg = settings.buy_x_get_y_progress_bar_background | default: '#E6E6E6'
  assign progress_bar_fill = settings.buy_x_get_y_progress_bar_fill | default: '#000000'
  assign icon_bg = settings.buy_x_get_y_icon_background | default: '#E6E6E6'
  assign icon_active_bg = settings.buy_x_get_y_icon_active_background | default: '#000000'

  # Get free items count from theme configuration
  assign max_free_items_count = settings.buy_x_get_y_free_items_count | default: 1

  # Generate promotion title
  if settings.buy_x_get_y_promotion_title != blank
    assign promotion_title = settings.buy_x_get_y_promotion_title | replace: '{{ count }}', required_quantity | replace: '{{ free_items }}', max_free_items_count
  else
    assign promotion_title = 'Buy ' | append: required_quantity | append: ' Get ' | append: max_free_items_count | append: ' Free üéÅ'
  endif

  # Get message settings from theme configuration
  if settings.buy_x_get_y_offer_unlocked_message != blank
    assign offer_unlocked_message = settings.buy_x_get_y_offer_unlocked_message | replace: '{{ free_items }}', max_free_items_count
  else
    assign offer_unlocked_message = 'content.buy_x_get_y_default_offer_unlocked' | t | replace: '{{ free_items }}', max_free_items_count
  endif

  assign remaining_quantity = required_quantity | minus: eligible_quantity
  if settings.buy_x_get_y_add_more_message != blank
    assign add_more_message = settings.buy_x_get_y_add_more_message | replace: '{{ count }}', remaining_quantity | replace: '{{ free_items }}', max_free_items_count
  else
    assign add_more_message = 'content.buy_x_get_y_default_add_more' | t | replace: '{{ count }}', remaining_quantity | replace: '{{ free_items }}', max_free_items_count
  endif

  # Calculate progress percentage using eligible quantity (items without discounts)
  assign progress_percentage = eligible_quantity | times: 100 | divided_by: required_quantity
  assign progress_percentage = progress_percentage | at_most: 100
%}

<div
  class="cart-discount-buy-x-get-y"
  role="status"
  aria-live="polite"
  style="
    --buy-x-get-y-progress-bg: {{ progress_bar_bg }};
    --buy-x-get-y-progress-fill: {{ progress_bar_fill }};
    --buy-x-get-y-icon-bg: {{ icon_bg }};
    --buy-x-get-y-icon-active-bg: {{ icon_active_bg }};
    --total-icons: {{ required_quantity | plus: 1 }};
  "
>
  <div class="cart-discount-buy-x-get-y__header">
    <span class="cart-discount-buy-x-get-y__title">
      {{ promotion_title | escape }}
    </span>
    <span class="cart-discount-buy-x-get-y__progress-text">
      {{ eligible_quantity }}/{{ required_quantity | plus: max_free_items_count }} {{ item_label }}
    </span>
  </div>

  <div class="cart-discount-buy-x-get-y__progress-container">
    <div
      class="cart-discount-buy-x-get-y__progress-bar"
      role="progressbar"
      aria-valuemin="0"
      aria-valuemax="{{ required_quantity }}"
      aria-valuenow="{{ eligible_quantity }}"
      style="background-color: {{ progress_bar_bg }};"
    >
        <div
         class="cart-discount-buy-x-get-y__progress-fill"
         style="transform: translateX(-{{ 100 | minus: progress_percentage }}%); background-color: {{ progress_bar_fill }};"
       ></div>
    </div>
    <div class="cart-discount-buy-x-get-y__progress-icons">
      <div class="cart-discount-buy-x-get-y__progress-icon cart-discount-buy-x-get-y__progress-icon--active">
        <svg
          xmlns="http://www.w3.org/2000/svg"
          width="24"
          height="24"
          viewBox="0 0 24 24"
          fill="none"
          stroke="currentColor"
          stroke-width="2"
          stroke-linecap="round"
          stroke-linejoin="round"
          aria-hidden="true"
        >
          <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 10V6a3 3 0 0 1 3-3v0a3 3 0 0 1 3 3v4m3-2 .917 11.923A1 1 0 0 1 17.92 21H6.08a1 1 0 0 1-.997-1.077L6 8h12Z"/>
        </svg>
      </div>

      <!-- Dynamic center icons based on required_quantity -->
      {%- for i in (2..required_quantity) -%}
        <div class="cart-discount-buy-x-get-y__progress-icon {% if eligible_quantity >= i %}cart-discount-buy-x-get-y__progress-icon--active{% endif %}">
          <svg
            xmlns="http://www.w3.org/2000/svg"
            width="24"
            height="24"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            stroke-width="2"
            stroke-linecap="round"
            stroke-linejoin="round"
            aria-hidden="true"
          >
            <path fill-rule="evenodd" d="M14 7h-4v3a1 1 0 0 1-2 0V7H6a1 1 0 0 0-.997.923l-.917 11.924A2 2 0 0 0 6.08 22h11.84a2 2 0 0 0 1.994-2.153l-.917-11.924A1 1 0 0 0 18 7h-2v3a1 1 0 1 1-2 0V7Zm-2-3a2 2 0 0 0-2 2v1H8V6a4 4 0 0 1 8 0v1h-2V6a2 2 0 0 0-2-2Z" clip-rule="evenodd"/>
          </svg>
        </div>
      {%- endfor -%}

      <!-- Last icon (gift icon) -->
      <div class="cart-discount-buy-x-get-y__progress-icon {% if eligible_quantity >= required_quantity %}cart-discount-buy-x-get-y__progress-icon--active{% endif %}">
        <svg
          xmlns="http://www.w3.org/2000/svg"
          width="24"
          height="24"
          viewBox="0 0 24 24"
          fill="none"
          stroke="currentColor"
          stroke-width="2"
          stroke-linecap="round"
          stroke-linejoin="round"
          aria-hidden="true"
        >
          <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 21v-9m3-4H7.5a2.5 2.5 0 1 1 0-5c1.5 0 2.875 1.25 3.875 2.5M14 21v-9m-9 0h14v8a1 1 0 0 1-1 1H6a1 1 0 0 1-1-1v-8ZM4 8h16a1 1 0 0 1 1 1v3H3V9a1 1 0 0 1 1-1Zm12.155-5c-3 0-5.5 5-5.5 5h5.5a2.5 2.5 0 0 0 0-5Z"/>
        </svg>
      </div>
    </div>
  </div>

  <div class="cart-discount-buy-x-get-y__message">
    {%- if eligible_quantity >= required_quantity -%}
      <span class="cart-discount-buy-x-get-y__message--unlocked">{{ offer_unlocked_message | escape }}</span>
    {%- else -%}
      <span>{{ add_more_message | escape }}</span>
    {%- endif -%}
  </div>
</div>

{% stylesheet %}
  .cart-discount-buy-x-get-y {
    border-bottom: 1px solid var(--color-border);
    background: var(--color-background);
  }

  .cart-discount-buy-x-get-y__header {
    display: flex;
    flex-wrap: wrap;
    align-items: center;
    justify-content: space-between;
    padding: var(--padding-md);
  }

  .cart-discount-buy-x-get-y__title {
    display: inline-flex;
    align-items: center;
    gap: var(--gap-xs);
    font-size: var(--font-size--sm);
    font-weight: 600;
    color: var(--color-foreground);
  }

  .cart-discount-buy-x-get-y__progress-text {
    font-size: var(--font-size--xs);
    font-weight: 500;
    color: var(--color-foreground-subdued);
  }

  .cart-discount-buy-x-get-y__progress-container {
    position: relative;
    direction: ltr;
    margin: 0 var(--margin-sm);
  }

  .cart-discount-buy-x-get-y__progress-bar {
    position: relative;
    background-color: var(--buy-x-get-y-progress-bg, var(--color-border));
    overflow: hidden;
    width: 100%;
    height: var(--icon-size-sm);
    border-radius: 9999px;
  }

  .cart-discount-buy-x-get-y__progress-fill {
    height: 100%;
    width: 100%;
    flex: 1;
    background-color: var(--buy-x-get-y-progress-fill, var(--color-primary));
    transition: transform 0.3s ease-in-out;
  }

  .cart-discount-buy-x-get-y__progress-icons {
    position: absolute;
    bottom: 0;
    left: 0;
    right: 0;
    top: 0;
    display: flex;
    align-items: center;
    justify-content: space-between;
  }

  .cart-discount-buy-x-get-y__progress-icon {
    display: flex;
    align-items: center;
    justify-content: center;
    border-radius: 50%;
    transition: all 0.3s ease-in-out;
    background-color: var(--buy-x-get-y-icon-bg, var(--color-border));
    color: var(--color-foreground-subdued);
    padding: var(--padding-2xs);
    box-shadow: 0 0 0 1px var(--color-border);
  }

  .cart-discount-buy-x-get-y__progress-icon svg {
    height: var(--icon-size-sm);
    width: var(--icon-size-sm);
  }

  .cart-discount-buy-x-get-y__progress-icon--active {
    background-color: var(--buy-x-get-y-icon-active-bg, var(--color-primary));
    color: var(--color-primary-button-text);
    border-color: var(--buy-x-get-y-icon-active-bg, var(--color-primary));
    box-shadow: 0 0 0 1px var(--buy-x-get-y-icon-active-bg, var(--color-primary));
  }

  .cart-discount-buy-x-get-y__message {
    text-align: center;
    padding: var(--padding-xs);
  }

  .cart-discount-buy-x-get-y__message span {
    font-size: var(--font-size--xs);
    font-weight: 500;
    padding: var(--padding-2xs) var(--padding-xs);
    border-radius: 10px;
  }

  .cart-discount-buy-x-get-y__message--unlocked {
    background-color: var(--buy-x-get-y-icon-active-bg, var(--color-primary));
    color: var(--color-primary-button-text);
    font-weight: 600;
  }

  /* Responsive adjustments */
  @media (max-width: 480px) {
    .cart-discount-buy-x-get-y__header {
      padding: var(--padding-sm);
    }

    .cart-discount-buy-x-get-y__title {
      font-size: var(--font-size--xs);
    }

    .cart-discount-buy-x-get-y__progress-text {
      font-size: var(--font-size--xs);
    }
  }
{% endstylesheet %}
